package dk.aau.sw1001f12;

import java.util.ArrayList;
import java.util.regex.Matcher;

import org.apache.commons.lang3.StringEscapeUtils;

import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;

public class Vulnerability {
	
	private int id;
	private String request;
	private String type;
	private ArrayList<Description> descriptions = new ArrayList<Description>();

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getRequest() {
		return request;
	}

	public void setRequest(String request) {
		this.request = GUI.getInstance().getHost() + request;
	}
	
	public String getType() {
		return type;
	}
	
	public void setType(String type) {
		this.type = StringEscapeUtils.escapeHtml4(type);
	}

	public ArrayList<Description> getDescriptions() {
		return descriptions;
	}

	public void setDescriptions(BasicDBList ds) {
		ArrayList<Description> descriptions = new ArrayList<Description>();
		for (int i = 0; i < ds.size(); i++) {

			BasicDBObject dbdescr = (BasicDBObject) ds.get(i);

			Description d = new Description();			
			d.setFlowpath( getFlowpath( (BasicDBList) dbdescr.get("flowpath") ) );
			d.setDependencies( getDependencies( (BasicDBList) dbdescr.get("dependencies") ) );
			
			descriptions.add(d);
			
		}
		this.descriptions = descriptions;
	}
	
	private ArrayList<String> getFlowpath(BasicDBList fs) {
		ArrayList<String> path = new ArrayList<String>();
		for (int i = 0; i < fs.size(); i++) {
			path.add(StringEscapeUtils.escapeHtml4(fs.get(i).toString()));
		}
		return path;
	}
	
	private ArrayList<String> getDependencies(BasicDBList ds) {
		ArrayList<String> deps = new ArrayList<String>();
		for (int i = 0; i < ds.size(); i++) {
			deps.add(StringEscapeUtils.escapeHtml4(ds.get(i).toString()));
		}
		return deps;
	}

	@Override
	public String toString() {
		return parseMain().replaceAll("\\{id\\}", ""+id);
	}
	
	private String parseMain() {
		 
		String html = Template.getInstance().readTemplate("vulnerability");
		html = html.replaceAll("\\{type\\}", Matcher.quoteReplacement(type));
		html = html.replaceAll("\\{request\\}", Matcher.quoteReplacement(request));
		html = html.replaceAll("\\{descriptions\\}", parseDescriptions( getDescriptions() ) );
		
		return html;
	}
	
	private String parseDescriptions(ArrayList<Description> descriptions) {
		
		String html = "";
		for (Description description : descriptions) {
			String subHtml = Template.getInstance().readTemplate("description");
			subHtml = subHtml.replaceAll("\\{flowpath\\}", parseFlowpath( description.getFlowpath() ) );
			subHtml = subHtml.replaceAll("\\{dependencies\\}", parseDependencies( description.getDependencides() ) );
			html += subHtml;
		}
		return Matcher.quoteReplacement(html);
	}
	
	private String parseFlowpath(ArrayList<String> flowpath) {
		
		String html = "";
		for(String flow : flowpath) {
			flow = Matcher.quoteReplacement(flow);
			html += Template.
					getInstance().
					readTemplate("flowpath").
					replaceAll("\\{entry\\}", flow);
		}
		return Matcher.quoteReplacement(html);
	}
	
	private String parseDependencies(ArrayList<String> dependencies) {

		String html = "";
		for(String dependency : dependencies) {
			dependency = Matcher.quoteReplacement(dependency);
			html += Template.
					getInstance().
					readTemplate("dependency").
					replaceAll("\\{entry\\}", dependency);
		}
		return Matcher.quoteReplacement(html);
	}
	
}
